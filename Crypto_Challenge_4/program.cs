using System;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;
using System.Text;

namespace ConsoleApp1
{
    class Program
    {
        public static string encText =

        public static BigInteger ModInverse(BigInteger a, BigInteger mod)
        {
            BigInteger i = mod, v = 0, d = 1;
            while (a > 0)
            {
                BigInteger t = i / a, x = a;
                a = i % x;
                i = x;
                x = d;
                d = v - t * x;
                v = x;
            }
            v %= mod;
            if (v < 0) v = (v + mod) % mod;
            return v;
        }

        public static BigInteger FindFactor(BigInteger N)
        {
            for (BigInteger i = 2; i * i <= N; i++)
            {
                if (N % i == 0)
                    return i;
            }
            return N;
        }

        public static BigInteger Decrypt(BigInteger c, BigInteger d, BigInteger N)
        {
            return BigInteger.ModPow(c, d, N);
        }

        public static BigInteger[] ConvertToBigIntegerArray(string cipherText)
        {
            return cipherText.Split(' ')
                .Select(block => BigInteger.Parse(block))
                .ToArray();
        }

        public static string ToASCIIString(BigInteger value)
        {
            byte[] bytes = value.ToByteArray();
            Array.Reverse(bytes);
            return Encoding.ASCII.GetString(bytes);
        }

        static void Main()
        {
            BigInteger N = 25379426616919;
            BigInteger e = 3;
            BigInteger p = FindFactor(N);
            BigInteger q = N / p;

            BigInteger phiN = (p - 1) * (q - 1);
            BigInteger d = ModInverse(e, phiN);

            BigInteger[] cipherTextBlocks = ConvertToBigIntegerArray(encText);
            StringBuilder asciiResult = new StringBuilder();

            foreach (BigInteger c in cipherTextBlocks)
            {
                BigInteger m = Decrypt(c, d, N);

                asciiResult.Append(ToASCIIString(m));
            }

            //Console.WriteLine("ASCII String: " + asciiResult.ToString());
            //Console.WriteLine("");
            Console.WriteLine(ConvertText(asciiResult.ToString()));

        }

        public static string ConvertText(string input)
        {
            string result = input;

            result = result.Replace("COMMA", ",");
            result = result.Replace("QUOTE", "\"");
            result = result.Replace("DOT", ".");
            result = result.Replace("QUESTIONMARK", "?");
            result = result.Replace("DASH", "-");
            result = result.Replace("COLON", ":");
            result = result.Replace("SLASH", "/");
            result = result.Replace("ONE", "1");
            result = result.Replace("TWO", "2");
            result = result.Replace("THREE", "3");
            result = result.Replace("FOUR", "4");
            result = result.Replace("FIVE", "5");
            result = result.Replace("SIX", "6");
            result = result.Replace("SEVEN", "7");
            result = result.Replace("EIGHT", "8");
            result = result.Replace("NINE", "9");
            result = result.Replace("TEN", "10");
            result = result.Replace("ZERO", "0");
            result = result.Replace("XX", "\n");

            return result;
        }
    }
}